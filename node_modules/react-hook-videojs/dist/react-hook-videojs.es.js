import React, { forwardRef, useRef, useLayoutEffect, useState, useCallback } from "react";
import videojs from "video.js";
import cloneDeep from "lodash.clonedeep";
import { dequal } from "dequal";
function useDeepCompareMemoize(value) {
  const ref = React.useRef(value);
  const signalRef = React.useRef(0);
  if (!dequal(value, ref.current)) {
    ref.current = value;
    signalRef.current += 1;
  }
  return React.useMemo(() => ref.current, [signalRef.current]);
}
const VideoJsWrapper = forwardRef(({ children, videoJsOptions, onReady, onDispose, classNames, ...props }, playerRef) => {
  const player = playerRef;
  const videoJsOptionsCloned = cloneDeep(videoJsOptions);
  const videoNode = useRef(null);
  const containerRef = useRef(null);
  useLayoutEffect(() => {
    var _a;
    if (!((_a = videoNode.current) == null ? void 0 : _a.parentNode))
      return;
    const originalVideoNodeParent = videoNode.current.parentNode.cloneNode(true);
    if (!player.current) {
      player.current = videojs(videoNode.current, videoJsOptionsCloned);
      player.current.ready(() => {
        onReady();
      });
    }
    return () => {
      var _a2;
      if (player.current) {
        player.current.dispose();
        if (containerRef.current && ((_a2 = videoNode.current) == null ? void 0 : _a2.parentNode) && !containerRef.current.contains(videoNode.current.parentNode)) {
          containerRef.current.appendChild(originalVideoNodeParent);
          videoNode.current = originalVideoNodeParent.firstChild;
        }
        player.current = null;
        onDispose();
      }
    };
  }, [useDeepCompareMemoize(videoJsOptions)]);
  return /* @__PURE__ */ React.createElement("div", {
    ref: containerRef
  }, /* @__PURE__ */ React.createElement("div", {
    "data-vjs-player": true
  }, /* @__PURE__ */ React.createElement("video", {
    ref: videoNode,
    className: `video-js ${classNames}`,
    ...props
  }, children)));
});
VideoJsWrapper.displayName = "VideoJsWrapper";
const useVideoJS = (videoJsOptions, classNames = "") => {
  const [ready, setReady] = useState(false);
  const player = useRef(null);
  const Video = useCallback(({ children, ...props }) => /* @__PURE__ */ React.createElement(VideoJsWrapper, {
    videoJsOptions,
    classNames,
    onReady: () => setReady(true),
    onDispose: () => setReady(false),
    ...props,
    ref: player
  }, children), [useDeepCompareMemoize(videoJsOptions), classNames]);
  return { Video, ready, player: player.current };
};
export {
  useVideoJS
};
//# sourceMappingURL=react-hook-videojs.es.js.map
